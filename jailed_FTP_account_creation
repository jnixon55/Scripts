#!/usr/bin/ksh/setup_ftp_account  (press RETURN)
#
#       Setup script to configure and jail FTP only users
#
#       expect that user-id may have been created by eTAC
#                       cross-check perms and dirs
#
#       usage: setup_ftp_user user-id
#
# Last update: Birendra K Singh, 2008/12/28
#
if [ -z $1 ]; then
        print "usage: $0 user"
        exit -1
fi

USERNAME=$1
SID=ftpadm
FTPGRP=ftpgrp
BASEDIR="/apps/ftp"
GID=nobody
SOC=/usr/bin/soc
ftpaccess=/etc/ftpd/ftpaccess
ftpusers=/etc/ftpd/ftpusers

ox=`logins -oxl $USERNAME 2>/dev/null`
if [ -z $ox ]; then
        print "User $1 does not exist. Create and continue?(y/n): \c"
        read CONFIRM
        case $CONFIRM in
                y)      echo "Real name of the user or business?: \c"
                        read REALNAME
                        /usr/sbin/useradd -g "$GID" -d "$BASEDIR/$USERNAME" -s /usr/bin/soc \
                                -c "$REALNAME" $USERNAME
                        if [ $? -eq 0 ]; then
                                print "User account created: $USERNAME"
                                ox=`logins -oxl $USERNAME 2>/dev/null`
                        else
                                print "Could not create user. Exit."
                                exit -1
                        fi;;
                *) print "Cancelled"
                        exit -1;;
        esac
else
        print "$USERNAME exists"
        print $ox
        echo
        print "Proceed?(y/n) \c"
        read CONFIRM
        case $CONFIRM in
                y)      continue;;
                *)      print "Cancelled"
                        exit -1;;
        esac
fi

um=""

u=`print $ox|cut -d: -f 1`
uid=`print $ox|cut -d: -f 2`
g=`print $ox|cut -d: -f 4`
[ $g != "$GID" ] && {
        um="$um -g $GID"
        }

h=`print $ox|cut -d: -f 6`
n=`print $ox|cut -d: -f 5`
s=`print $ox|cut -d: -f 7`

print "Check Home $h: \c"
if [ "$h" = "$BASEDIR/$u" ]; then
        print "ok"
else
        print "will be changed"
        um="$um -d $BASEDIR/$u"
        h=$BASEDIR/$u
fi

print "Check shell $s: \c"
if [ "$s" = "/usr/bin/soc" ]; then
        print "ok"
else
        print "will be changed"
        um="$um -s /usr/bin/soc"
fi

if [ "$um" ]; then
        /usr/sbin/usermod $um $u
        [ $? -ne 0 ] && {
                print "usermod $um $u failed"; exit -1
                }
fi

print "$h: \c"
if [ -d "$h" ]; then
        print "ok"
else
        mkdir -p $h
        [ $? -ne 0 ] && {
                print could not create $h; exit -1
                }
        print "created"
fi

chmod 750 $h

print "$h/incoming: \c"
if [ -d $h/incoming ]; then
        print "ok"
else
        mkdir $h/incoming
        [ $? -ne 0 ] && {
                print could not create $h/incoming; exit -1
                }
        print "created"
fi
chmod 770 $h/incoming

print "$h/outgoing: \c"
if [ -d $h/outgoing ]; then
        print "ok"
else
        mkdir $h/outgoing
        [ $? -ne 0 ] && {
                print could not create $h/outgoing; exit -1
                }
        print "created"
fi
chmod 770 $h/outgoing

# Home ownership
chown -R $u:$FTPGRP $h

print "/apps/archive/$u/incoming: \c"
if [ -d /apps/archive/$u/incoming ]; then
        print "ok"
else
        mkdir -p /apps/archive/$u/incoming
        [ $? -ne 0 ] && {
                print could not create /apps/archive/$u/incoming; exit -1
                }
        print "created"
fi

print "/apps/archive/$u/outgoing: \c"
if [ -d /apps/archive/$u/outgoing ]; then
        print "ok"
else
        mkdir -p /apps/archive/$u/outgoing
        [ $? -ne 0 ] && {
                print could not create /apps/archive/$u/outgoing; exit -1
                }
        print "created"
fi
chown -R $SID:$FTPGRP /apps/archive/$u
chmod -R 750 /apps/archive/$u

print "/apps/util/$u: \c"
if [ -d /apps/util/$u ]; then
        print "ok"
else
        mkdir /apps/util/$u
        [ $? -ne 0 ] && {
                print could not create /apps/util/$u; exit -1
                }
        print "created"
fi
chown $SID:$FTPGRP /apps/util/$u
chmod 750 /apps/util/$u

# Link old style util dir; just in case
#
ln -s /apps/util/$u /utilities/ftp_$u

# Check whether exists in /etc/ftpd/ftpaccess
print "$ftpaccess: \c"
found=0
grep ^restricted-uid $ftpaccess|while read x
do
for i in $x
 do
         if [ "$i" = "$u" ]; then
                 found=1
                 print "ok"
                 break
         fi
 done
 [ $found -eq 1 ] && break
done

if [ $found -eq 0 ]; then
 suff=`date '+%y%m%d%H%M%S'`
 cp -p $ftpaccess $ftpaccess.$suff
 line=`grep ^restricted-uid $ftpaccess|tail -1`

 if [ ${#line} -gt 70 ]; then
         echo "restricted-uid $u" >>$ftpaccess
 else
         sed -e "s/$line/$line $u/" <$ftpaccess.$suff >$ftpaccess
 fi

 print updated
fi

# Check and update ftpusers
print "$ftpusers: \c"
c=`grep -c ^$u$ $ftpusers`
if [ $c -eq 0 ]; then
 print $u >>$ftpusers
 print updated
else
 print ok
fi

# Check and setup email alias
print "Check email alias: \c"
c=`grep -c ^${u}: /etc/aliases`
if [ $c -eq 0 ]; then
 print "$u: ftpadm" >>/etc/aliases
 /usr/sbin/newaliases
 print updated
else
 print ok
fi

# Double Check where are we!!
#
cd ~$u
cd ..
cd sftp_jail_proto
flist=`find . -type f`

cd ~$u
for f in $flist
do
 d=`dirname $f`
 if [ ! -d $d ]; then
         mkdir -p $d
 fi

 ln ../sftp_jail_proto/$f $f
done

# Passwd file
#
cd ~$u/etc
rm passwd
cp -p ../../sftp_jail_proto/etc/passwd .
echo "$u:x:$uid:$g:$n:$h:/bin/ksh" >>passwd
